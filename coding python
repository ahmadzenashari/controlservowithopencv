import cv2
import mediapipe as mp
import serial
import time

# Inisialisasi MediaPipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands()
mp_draw = mp.solutions.drawing_utils

# Inisialisasi komunikasi serial
ser = serial.Serial('/dev/ttyUSB0', 9600)  # Ganti '/dev/ttyUSB0' dengan port serial yang sesuai
time.sleep(2)  # Tunggu 2 detik untuk inisialisasi

# Fungsi untuk menghitung jumlah jari yang terangkat
def count_fingers(hand_landmarks):
    finger_tips = [8, 12, 16, 20]
    thumb_tip = 4
    count = 0

    if hand_landmarks:
        # Periksa ibu jari
        if hand_landmarks.landmark[thumb_tip].x < hand_landmarks.landmark[thumb_tip - 2].x:
            count += 1

        # Periksa jari lainnya
        for tip in finger_tips:
            if hand_landmarks.landmark[tip].y < hand_landmarks.landmark[tip - 2].y:
                count += 1

    return count

# Inisialisasi video capture
cap = cv2.VideoCapture(0)

while cap.isOpened():
    success, img = cap.read()
    if not success:
        break
    img = cv2.flip(img, 1)
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = hands.process(img_rgb)

    fingers_count = 0  # Default ke 0 jika tidak ada jari yang terdeteksi

    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_draw.draw_landmarks(img, hand_landmarks, mp_hands.HAND_CONNECTIONS)
            fingers_count = count_fingers(hand_landmarks)

    # Tampilkan jumlah jari di layar
    cv2.putText(img, f'Fingers: {fingers_count}', (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)

    # Kirim data jumlah jari ke Arduino
    ser.write(f'{fingers_count}\n'.encode())

    cv2.imshow('Hand Tracking', img)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
ser.close()
cv2.destroyAllWindows()
